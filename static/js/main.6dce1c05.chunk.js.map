{"version":3,"sources":["img/devvrat-profile-pic.jpg","components/profile-picture.jsx","components/intro.jsx","components/social-connector.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ProfilePicture","_this$props","this","props","src","rotate","type","height","width","imgStyleRound","border-radius","imgStyleCurvedEdges","react_default","a","createElement","style","className","alt","Component","Intro","state","role","text","SocialConnector","iconSize","iconColor","linkedInURL","gitHubURL","twitterURL","iconStyle","fontSize","color","cursor","href","aria-hidden","App","components_profile_picture","image","intro","social_connector","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kRC8BzBC,0LA1BJ,IAAAC,EACsCC,KAAKC,MAA1CC,EADDH,EACCG,IAAKC,EADNJ,EACMI,OAAQC,EADdL,EACcK,KAAMC,EADpBN,EACoBM,OAAQC,EAD5BP,EAC4BO,MAE7BC,EAAgB,CACpBC,gBAAiB,MACjBH,SACAC,SAGIG,EAAsB,CAC1BD,gBAAiB,MACjBH,SACAC,SAGF,OACEI,EAAAC,EAAAC,cAAA,OACEV,IAAKA,EACLW,MAAgB,aAATT,EAAsBG,EAAgBE,EAC7CK,WAAsB,IAAXX,EAAkB,cAAgB,GAC7CY,IAAI,eArBiBC,cCUdC,oNAVbC,MAAQ,2EAEN,OACER,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBAAwBK,KAAK,SAC1CT,EAAAC,EAAAC,cAAA,QAAME,UAAU,oBAAoBd,KAAKC,MAAMmB,cALnCJ,cC+BLK,mLA9BJ,IAAAtB,EAC6DC,KAAKC,MAAjEqB,EADDvB,EACCuB,SAAUC,EADXxB,EACWwB,UAAWC,EADtBzB,EACsByB,YAAaC,EADnC1B,EACmC0B,UAAWC,EAD9C3B,EAC8C2B,WAC/CC,EAAY,CAChBC,SAAUN,EACVO,MAAON,EACPO,OAAQ,WAGV,OACEpB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,IACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,OACdJ,EAAAC,EAAAC,cAAA,KAAGmB,KAAMP,GACPd,EAAAC,EAAAC,cAAA,KAAGC,MAAOc,EAAWb,UAAU,iBAAiBkB,cAAY,WAGhEtB,EAAAC,EAAAC,cAAA,QAAME,UAAU,OACdJ,EAAAC,EAAAC,cAAA,KAAGmB,KAAMN,GACPf,EAAAC,EAAAC,cAAA,KAAGC,MAAOc,EAAWb,UAAU,mBAAmBkB,cAAY,SAAU,MAG5EtB,EAAAC,EAAAC,cAAA,QAAME,UAAU,OACdJ,EAAAC,EAAAC,cAAA,KAAGmB,KAAML,GACPhB,EAAAC,EAAAC,cAAA,KAAGC,MAAOc,EAAWb,UAAU,gBAAgBkB,cAAY,SAAU,cAvBnDhB,aCyCfiB,mLA9BX,OACEvB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAACsB,EAAD,CACEhC,IAAKiC,IACLhC,QAAQ,EACRC,KAAK,WACLC,OAAO,QACPC,MAAM,UAERI,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACwB,EAAD,CAAOhB,KAAM,8CACbV,EAAAC,EAAAC,cAACyB,EAAD,CACEZ,UAnBM,mCAoBND,YAnBQ,yCAoBRE,WAnBO,gCAoBPJ,SAAU,GACVC,UAAU,YAIhBb,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBA7BPE,aCKEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECVNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6dce1c05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/devvrat-profile-pic.d2337389.jpg\";","import React, { Component } from \"react\";\r\nimport \"../components/profile-picture.css\";\r\n\r\nclass ProfilePicture extends Component {\r\n  render() {\r\n    const { src, rotate, type, height, width } = this.props;\r\n\r\n    const imgStyleRound = {\r\n      \"border-radius\": \"50%\",\r\n      height,\r\n      width\r\n    };\r\n\r\n    const imgStyleCurvedEdges = {\r\n      \"border-radius\": \"10%\",\r\n      height,\r\n      width\r\n    };\r\n\r\n    return (\r\n      <img\r\n        src={src}\r\n        style={type === \"circular\" ? imgStyleRound : imgStyleCurvedEdges}\r\n        className={rotate === true ? \"profile-pic\" : \"\"}\r\n        alt=\"pic\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProfilePicture;\r\n","import React, { Component } from 'react';\r\n\r\nclass Intro extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"alert alert-secondary\" role=\"alert\">\r\n        <span className=\"font-weight-bold\">{this.props.text}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Intro;\r\n","import React, { Component } from 'react';\r\n\r\nclass SocialConnector extends Component {\r\n  render() {\r\n    const { iconSize, iconColor, linkedInURL, gitHubURL, twitterURL } = this.props;\r\n    const iconStyle = {\r\n      fontSize: iconSize,\r\n      color: iconColor,\r\n      cursor: 'pointer'\r\n    };\r\n\r\n    return (\r\n      <div className=\"\">\r\n        <span className=\"m-2\">\r\n          <a href={linkedInURL}>\r\n            <i style={iconStyle} className=\"fa fa-linkedin\" aria-hidden=\"true\" />\r\n          </a>\r\n        </span>\r\n        <span className=\"m-2\">\r\n          <a href={gitHubURL}>\r\n            <i style={iconStyle} className=\"fa fa-github-alt\" aria-hidden=\"true\" />{' '}\r\n          </a>\r\n        </span>\r\n        <span className=\"m-2\">\r\n          <a href={twitterURL}>\r\n            <i style={iconStyle} className=\"fa fa-twitter\" aria-hidden=\"true\" />{' '}\r\n          </a>\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SocialConnector;\r\n","import React, { Component } from 'react';\r\nimport image from './img/devvrat-profile-pic.jpg';\r\nimport ProfilePicture from './components/profile-picture';\r\nimport './App.css';\r\nimport Intro from './components/intro';\r\nimport SocialConnector from './components/social-connector';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    const gitHubURL = 'https://github.com/devvratshukla';\r\n    const linkedInURL = 'https://linkedin.com/in/devvratshukla/';\r\n    const twitterURL = 'https://twitter.com/godevvrat';\r\n\r\n    return (\r\n      <div className=\"container app\">\r\n        <div className=\"row\">\r\n          <div className=\"col-6 bg-info\">\r\n            <div className=\"intro-space \">\r\n              <ProfilePicture\r\n                src={image}\r\n                rotate={false}\r\n                type=\"circular\"\r\n                height=\"350px\"\r\n                width=\"350px\"\r\n              />\r\n              <br />\r\n              <Intro text={'Hi, I am Devvrat. A full Stack Developer.'} />\r\n              <SocialConnector\r\n                gitHubURL={gitHubURL}\r\n                linkedInURL={linkedInURL}\r\n                twitterURL={twitterURL}\r\n                iconSize={40}\r\n                iconColor=\"white\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"col\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'font-awesome/css/font-awesome.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}